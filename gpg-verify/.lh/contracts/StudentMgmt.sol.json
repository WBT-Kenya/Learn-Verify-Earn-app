{
    "sourceFile": "contracts/StudentMgmt.sol",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1711013012970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1711013012970,
            "name": "Commit-0",
            "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract StudentManagement {\n    \n    struct Student {\n        uint256 studentId;\n        string name;\n        mapping(uint256 => bool) enrolledCourses;\n        mapping(uint256 => bool) assessmentsPassed;\n    }\n\n\n    struct Course {\n    uint256 courseId;\n    string courseName;\n    uint256 passMark; // Pass mark out of 100\n    }\n    \n    \n    mapping(uint256 => Student) public students;\n    mapping(uint256 => Course) public courses;\n    \n    uint256 public lastStudentId;\n    uint256 public lastCourseId;\n    \n    event StudentEnrolled(uint256 studentId, string name, uint256 courseId);\n    event StudentAssessmentTaken(uint256 studentId, uint256 courseId, bool passed);\n    \n    constructor() {\n        lastStudentId = 0;\n        lastCourseId = 0;\n    }\n    \n    \n    function enrollStudent(string memory _name) external {\n        lastStudentId++;\n        Student storage newStudent = students[lastStudentId];\n        newStudent.studentId = lastStudentId;\n        newStudent.name = _name;\n    }\n    \n    function createCourse(string memory _courseName, uint256 _passMark) external {\n        lastCourseId++;\n        courses[lastCourseId] = Course(lastCourseId, _courseName, _passMark);\n    }\n\n    function enrollStudentInCourse(uint256 _studentId, uint256 _courseId) external {\n        require(students[_studentId].studentId != 0, \"Student does not exist\");\n        require(courses[_courseId].courseId != 0, \"Course does not exist\");\n        \n        students[_studentId].enrolledCourses[_courseId] = true;\n        emit StudentEnrolled(_studentId, students[_studentId].name, _courseId);\n    }\n    \n    function takeAssessment(uint256 _studentId, uint256 _courseId, uint256 _assessmentId, uint256 _score) external {\n        require(students[_studentId].studentId != 0, \"Student does not exist\");\n        require(courses[_courseId].courseId != 0, \"Course does not exist\");\n        require(_score >= 0 && _score <= 100, \"Invalid score\");\n        \n        if (_score >= courses[_courseId].passMark) {\n            students[_studentId].assessmentsPassed[_assessmentId] = true;\n            emit StudentAssessmentTaken(_studentId, _courseId, true);\n        } else {\n            students[_studentId].assessmentsPassed[_assessmentId] = false;\n            emit StudentAssessmentTaken(_studentId, _courseId, false);\n        }\n        \n        //  courses[_courseId].assessments[_assessmentId] = true;\n    }\n    \n    function verifyAssessment(uint256 _studentId, uint256 _courseId, uint256 _assessmentId) external view returns (bool) {\n        require(students[_studentId].studentId != 0, \"Student does not exist\");\n        require(courses[_courseId].courseId != 0, \"Course does not exist\");\n        \n        return students[_studentId].assessmentsPassed[_assessmentId];\n    }\n}"
        }
    ]
}