{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vgInstantiatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "ChallengeStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_claimedFinalHash",
          "type": "bytes32"
        }
      ],
      "name": "ClaimSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_machineAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_initialHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_finalTime",
          "type": "uint256"
        }
      ],
      "name": "ComputeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "ComputeFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "ResultConfirmed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "challenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "claimVictoryByTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "confirm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "deactivate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getCurrentState",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_roundDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeToStartMachine",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_partitionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCycle",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_picoSecondsToRunInsn",
          "type": "uint256"
        }
      ],
      "name": "getMaxInstanceDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_machine",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_initialHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_finalTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_claimedFinalHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_currentState",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getSubInstances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_roundDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_machineAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_initialHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_finalTime",
          "type": "uint256"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isConcerned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsChallengerWon",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsClaimerMissedDeadline",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsClaimerWon",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsConsensusResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsWaitingChallange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsWaitingClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "stateIsWaitingConfirmation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_claimedFinalHash",
          "type": "bytes32"
        }
      ],
      "name": "submitClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "winByVG",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0xc6956323f9AC641e2e9ee1F70766efec43aB8CEC",
    "transactionIndex": 4,
    "gasUsed": "1825028",
    "logsBloom": "0x
    "blockHash": "0x03fa6a269eb5e86180280aa302a40551b77cbdda5b06d7787acf8402cc4dfa39",
    "transactionHash": "0xa68171812451c88dc4772763cf174bbd9af040cd1145ef581da1c900cb65635c",
    "logs": [],
    "blockNumber": 8693084,
    "cumulativeGasUsed": "1933898",
    "status": 1,
    "byzantium": true
  },
  "address": "0xc6956323f9AC641e2e9ee1F70766efec43aB8CEC",
  "args": [
    "0xc2e23F01f5685E35D83Cf104Cf2F0CAE1E64Fb1F"
  ],
  "solcInputHash": "0x42b609482474b272bec93b3bfa26f2c87c2a0a56d0daaf2511deb7af6d8c3952",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vgInstantiatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"ChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_claimedFinalHash\",\"type\":\"bytes32\"}],\"name\":\"ClaimSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_machineAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_initialHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finalTime\",\"type\":\"uint256\"}],\"name\":\"ComputeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"ComputeFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"ResultConfirmed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"challenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimVictoryByTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCurrentState\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToStartMachine\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partitionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_picoSecondsToRunInsn\",\"type\":\"uint256\"}],\"name\":\"getMaxInstanceDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_machine\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_initialHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_finalTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_claimedFinalHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_currentState\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getSubInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_machineAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_initialHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_finalTime\",\"type\":\"uint256\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isConcerned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsChallengerWon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsClaimerMissedDeadline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsClaimerWon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsConsensusResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsWaitingChallange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsWaitingClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stateIsWaitingConfirmation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_claimedFinalHash\",\"type\":\"bytes32\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"winByVG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"challenge(uint256)\":{\"params\":{\"_index\":\"Index of compute instance which challenger is starting the VG.\"}},\"confirm(uint256)\":{\"params\":{\"_index\":\"Index of compute instance that the challenger is confirming the claim.\"}},\"getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_maxCycle\":\"number of instructions until the machine is forcibly halted\",\"_picoSecondsToRunInsn\":\"time the offchain will take to run one instruction\"}},\"instantiate(address,address,uint256,address,bytes32,uint256)\":{\"params\":{\"_challenger\":\"address of the challenger.\",\"_claimer\":\"address of the claimer.\",\"_finalTime\":\"max cycle of the machine for that computation\",\"_initialHash\":\"hash in which both claimer and challenger agree on\",\"_machineAddress\":\"address of the machine that will run the instruction\",\"_roundDuration\":\"duration of the round (security param)\"},\"returns\":{\"_0\":\"Compute index.\"}},\"submitClaim(uint256,bytes32)\":{\"params\":{\"_claimedFinalHash\":\"hash of the machine after computation is completed.\",\"_index\":\"Index of instance that the claimer is interacting with\"}},\"winByVG(uint256)\":{\"params\":{\"_index\":\"Index of compute instance which challenger is starting the VG.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"challenge(uint256)\":{\"notice\":\"Challenger disputes the claim, starting a verification game.\"},\"claimVictoryByTime(uint256)\":{\"notice\":\"Claim victory for opponent timeout.\"},\"confirm(uint256)\":{\"notice\":\"Challenger accepts claim.\"},\"instantiate(address,address,uint256,address,bytes32,uint256)\":{\"notice\":\"Instantiates a compute instance.\"},\"submitClaim(uint256,bytes32)\":{\"notice\":\"Claimer claims the hash of the result of a computation\"},\"winByVG(uint256)\":{\"notice\":\"In case one of the parties wins the verification game, then he or she can call this function to claim victory in this contract as well.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ComputeInstantiator.sol\":\"ComputeInstantiator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/Decorated.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\n\\ncontract Decorated {\\n    // This contract defines several modifiers but does not use\\n    // them - they will be used in derived contracts.\\n    modifier onlyBy(address user) {\\n        require(msg.sender == user, \\\"Cannot be called by user\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfter(uint256 time) {\\n        require(block.timestamp > time, \\\"Cannot be called now\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbba019b8f7f93b212a5bbae402ee988321c4fa82ed2b4c9e55b4d7ddf35dcc3\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n\\n    function deactivate(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x084e3e769f423b3f32bd8faf119be132a478eeea8006bed69b527b2fdcfd45a1\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/InstantiatorImpl.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Instantiator.sol\\\";\\n\\nabstract contract InstantiatorImpl is Instantiator {\\n    uint256 public currentIndex = 0;\\n\\n    mapping(uint256 => bool) internal active;\\n    mapping(uint256 => uint256) internal nonce;\\n\\n    modifier onlyInstantiated(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        _;\\n    }\\n\\n    modifier onlyActive(uint256 _index) override {\\n        require(currentIndex > _index, \\\"Index not instantiated\\\");\\n        require(isActive(_index), \\\"Index inactive\\\");\\n        _;\\n    }\\n\\n    modifier increasesNonce(uint256 _index) override {\\n        nonce[_index]++;\\n        _;\\n    }\\n\\n    function isActive(uint256 _index) public override view returns (bool) {\\n        return (active[_index]);\\n    }\\n\\n    function getNonce(uint256 _index)\\n        public\\n        override\\n        view\\n        onlyActive(_index)\\n        returns (uint256 currentNonce)\\n    {\\n        return nonce[_index];\\n    }\\n\\n    function deactivate(uint256 _index) public override {\\n        active[_index] = false;\\n        nonce[_index] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc1db237a28042f74224ae2d4398616fb670ce87709ffd8505c142cddedee6954\",\"license\":\"Apache-2.0\"},\"contracts/ComputeInstantiator.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title An instantiator of compute\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/InstantiatorImpl.sol\\\";\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"./ComputeInterface.sol\\\";\\nimport \\\"./VGInterface.sol\\\";\\n\\n\\ncontract ComputeInstantiator is InstantiatorImpl, ComputeInterface, Decorated {\\n    // after instantiation, the claimer will submit the final hash\\n    // then the challenger can either accept of challenge.\\n    // in the latter case a verification game will be instantiated\\n    // to resolve the dispute.\\n\\n    VGInterface private vg;\\n\\n    // IMPLEMENT GARBAGE COLLECTOR AFTER AN INSTACE IS FINISHED!\\n    struct ComputeCtx {\\n        address challenger;\\n        address claimer;\\n        uint256 roundDuration; // time interval to interact with this contract\\n        uint256 timeOfLastMove; // last time someone made a move with deadline\\n        address machine; // machine which will run the challenge\\n        bytes32 initialHash;\\n        uint256 finalTime;\\n        bytes32 claimedFinalHash;\\n        uint256 vgInstance; // instance of verification game in case of dispute\\n        state currentState;\\n    }\\n\\n    mapping(uint256 => ComputeCtx) internal instance;\\n\\n    // These are the possible states and transitions of the contract.\\n\\n    // +---+\\n    // |   |\\n    // +---+\\n    //   |\\n    //   | instantiate\\n    //   v\\n    // +--------------+ claimVictoryByTime +-----------------------+\\n    // | WaitingClaim |------------------->| ClaimerMisseddeadline |\\n    // +--------------+                    +-----------------------+\\n    //   |\\n    //   | submitClaim\\n    //   v\\n    // +---------------------+  confirm    +-----------------+\\n    // | WaitingConfirmation |------------>| ConsensusResult |\\n    // +---------------------+ or deadline +-----------------+\\n    //   |\\n    //   | challenge\\n    //   v\\n    // +------------------+ winByVG        +---------------+\\n    // | WaitingChallenge |--------------->| ChallengerWon |\\n    // +------------------+                +---------------+\\n    //   |\\n    //   |\\n    //   |                  winByVG        +------------+\\n    //   +-------------------------------->| ClaimerWon |\\n    //                                     +------------+\\n    //\\n\\n    event ComputeCreated(\\n        uint256 _index,\\n        address _challenger,\\n        address _claimer,\\n        uint256 _roundDuration,\\n        address _machineAddress,\\n        bytes32 _initialHash,\\n        uint256 _finalTime\\n    );\\n    event ClaimSubmitted(uint256 _index, bytes32 _claimedFinalHash);\\n    event ResultConfirmed(uint256 _index);\\n    event ChallengeStarted(uint256 _index);\\n    event ComputeFinished(uint256 _index, uint8 _state);\\n\\n    constructor(address _vgInstantiatorAddress) {\\n        vg = VGInterface(_vgInstantiatorAddress);\\n    }\\n\\n    /// @notice Instantiates a compute instance.\\n    /// @param _challenger address of the challenger.\\n    /// @param _claimer address of the claimer.\\n    /// @param _roundDuration duration of the round (security param)\\n    /// @param _machineAddress address of the machine that will run the instruction\\n    /// @param _initialHash hash in which both claimer and challenger agree on\\n    /// @param _finalTime max cycle of the machine for that computation\\n    /// @return Compute index.\\n    function instantiate(\\n        address _challenger,\\n        address _claimer,\\n        uint256 _roundDuration,\\n        address _machineAddress,\\n        bytes32 _initialHash,\\n        uint256 _finalTime) public override returns (uint256)\\n    {\\n        require(_challenger != _claimer, \\\"Challenger and Claimer need to differ\\\");\\n        ComputeCtx storage currentInstance = instance[currentIndex];\\n        currentInstance.challenger = _challenger;\\n        currentInstance.claimer = _claimer;\\n        currentInstance.roundDuration = _roundDuration;\\n        currentInstance.machine = _machineAddress;\\n        currentInstance.initialHash = _initialHash;\\n        currentInstance.finalTime = _finalTime;\\n        currentInstance.currentState = state.WaitingClaim;\\n        currentInstance.timeOfLastMove = block.timestamp;\\n\\n        emit ComputeCreated(\\n            currentIndex,\\n            _challenger,\\n            _claimer,\\n            _roundDuration,\\n            _machineAddress,\\n            _initialHash,\\n            _finalTime);\\n\\n        active[currentIndex] = true;\\n        return currentIndex++;\\n    }\\n\\n    /// @notice Claimer claims the hash of the result of a computation\\n    /// @param _index Index of instance that the claimer is interacting with\\n    /// @param _claimedFinalHash hash of the machine after computation is completed.\\n    function submitClaim(uint256 _index, bytes32 _claimedFinalHash) public override\\n        onlyInstantiated(_index)\\n        onlyBy(instance[_index].claimer)\\n        increasesNonce(_index)\\n    {\\n        require(instance[_index].currentState == state.WaitingClaim, \\\"State should be WaitingClaim\\\");\\n        instance[_index].claimedFinalHash = _claimedFinalHash;\\n        instance[_index].currentState = state.WaitingConfirmation;\\n\\n        emit ClaimSubmitted(_index, _claimedFinalHash);\\n    }\\n\\n    /// @notice Challenger accepts claim.\\n    /// @param _index Index of compute instance that the challenger is confirming the claim.\\n    function confirm(uint256 _index) public override\\n        onlyInstantiated(_index)\\n        onlyBy(instance[_index].challenger)\\n        increasesNonce(_index)\\n    {\\n        require(instance[_index].currentState == state.WaitingConfirmation, \\\"State should be WaitingConfirmation\\\");\\n        instance[_index].currentState = state.ConsensusResult;\\n        clearInstance(_index);\\n        emit ResultConfirmed(_index);\\n    }\\n\\n    /// @notice Challenger disputes the claim, starting a verification game.\\n    /// @param _index Index of compute instance which challenger is starting the VG.\\n    function challenge(uint256 _index) public override\\n        onlyInstantiated(_index)\\n        onlyBy(instance[_index].challenger)\\n        increasesNonce(_index)\\n    {\\n        require(instance[_index].currentState == state.WaitingConfirmation, \\\"State should be WaitingConfirmation\\\");\\n        instance[_index].vgInstance = vg.instantiate(\\n            instance[_index].challenger,\\n            instance[_index].claimer,\\n            instance[_index].roundDuration,\\n            instance[_index].machine,\\n            instance[_index].initialHash,\\n            instance[_index].claimedFinalHash,\\n            instance[_index].finalTime);\\n        instance[_index].currentState = state.WaitingChallenge;\\n\\n        emit ChallengeStarted(_index);\\n    }\\n\\n    /// @notice In case one of the parties wins the verification game,\\n    /// then he or she can call this function to claim victory in\\n    /// this contract as well.\\n    /// @param _index Index of compute instance which challenger is starting the VG.\\n    function winByVG(uint256 _index) public override\\n        onlyInstantiated(_index)\\n        increasesNonce(_index)\\n    {\\n        require(instance[_index].currentState == state.WaitingChallenge, \\\"State is not WaitingChallenge, cannot winByVG\\\");\\n        uint256 vgIndex = instance[_index].vgInstance;\\n\\n        if (vg.stateIsFinishedChallengerWon(vgIndex)) {\\n            challengerWins(_index);\\n            return;\\n        }\\n\\n        if (vg.stateIsFinishedClaimerWon(vgIndex)) {\\n            claimerWins(_index);\\n            return;\\n        }\\n        require(false, \\\"State of VG is not final\\\");\\n    }\\n\\n    /// @notice Claim victory for opponent timeout.\\n    function claimVictoryByTime(uint256 _index) public override\\n        onlyInstantiated(_index)\\n        increasesNonce(_index)\\n    {\\n       bool afterDeadline = (block.timestamp > instance[_index].timeOfLastMove + getMaxStateDuration(\\n               instance[_index].currentState,\\n               instance[_index].roundDuration,\\n               40, // time to start machine\\n               1, // vg is not instantiated, so it doesnt matter\\n               instance[_index].finalTime,\\n               500) // pico seconds to run instruction\\n           );\\n\\n\\n        require(afterDeadline, \\\"Deadline is not over for this specific state\\\");\\n\\n        if ((msg.sender == instance[_index].challenger) && (instance[_index].currentState == state.WaitingClaim)) {\\n            instance[_index].currentState = state.ClaimerMissedDeadline;\\n            deactivate(_index);\\n            emit ComputeFinished(_index, uint8(instance[_index].currentState));\\n            return;\\n        }\\n\\n        if ((msg.sender == instance[_index].claimer) && (instance[_index].currentState == state.WaitingConfirmation)) {\\n            instance[_index].currentState = state.ConsensusResult;\\n            deactivate(_index);\\n            emit ComputeFinished(_index, uint8(instance[_index].currentState));\\n            return;\\n        }\\n        revert(\\\"Fail to ClaimVictoryByTime in current condition\\\");\\n    }\\n\\n    /// @notice Get the worst case scenario duration for a specific state\\n    /// @param _roundDuration security parameter, the max time an agent\\n    //          has to react and submit one simple transaction\\n    /// @param _timeToStartMachine time to build the machine for the first time\\n    /// @param _partitionSize size of partition, how many instructions the\\n    //          will run to reach the necessary hash\\n    /// @param _maxCycle is the maximum amount of steps a machine can perform\\n    //          before being forced into becoming halted\\n    /// @param _picoSecondsToRunInsn time the offchain will take to run one instruction\\n    function getMaxStateDuration(\\n        state _state,\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine,\\n        uint256 _partitionSize,\\n        uint256 _maxCycle,\\n        uint256 _picoSecondsToRunInsn\\n    ) private view returns (uint256)\\n    {\\n        if (_state == state.WaitingClaim) {\\n            // time to run entire machine + time to react\\n            return _timeToStartMachine + ((_maxCycle * _picoSecondsToRunInsn) / 1e12) + _roundDuration;\\n        }\\n\\n        if (_state == state.WaitingConfirmation) {\\n            // time to run entire machine + time to react\\n            return _timeToStartMachine + ((_maxCycle * _picoSecondsToRunInsn) / 1e12) + _roundDuration;\\n        }\\n\\n        if (_state == state.WaitingChallenge) {\\n            // time to run a verification game + time to react\\n            return vg.getMaxInstanceDuration(_roundDuration, _timeToStartMachine, _partitionSize, _maxCycle, _picoSecondsToRunInsn) + _roundDuration;\\n        }\\n\\n        if (_state == state.ClaimerWon || _state == state.ChallengerWon || _state == state.ClaimerMissedDeadline || _state == state.ConsensusResult) {\\n            return 0; // final state\\n        }\\n    }\\n\\n    /// @notice Get the worst case scenario duration for an instance of this contract\\n    /// @param _roundDuration security parameter, the max time an agent\\n    //          has to react and submit one simple transaction\\n    /// @param _timeToStartMachine time to build the machine for the first time\\n    /// @param _partitionSize size of partition, how many instructions the\\n    //          will run to reach the necessary hash\\n    /// @param _maxCycle number of instructions until the machine is forcibly halted\\n    /// @param _picoSecondsToRunInsn time the offchain will take to run one instruction\\n    function getMaxInstanceDuration(\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine,\\n        uint256 _partitionSize,\\n        uint256 _maxCycle,\\n        uint256 _picoSecondsToRunInsn\\n    ) public view returns (uint256)\\n    {\\n        uint256 waitingClaim = getMaxStateDuration(\\n            state.WaitingClaim,\\n            _roundDuration,\\n            _timeToStartMachine,\\n            _partitionSize,\\n            _maxCycle,\\n            _picoSecondsToRunInsn\\n        );\\n\\n        uint256 waitingConfirmation = getMaxStateDuration(\\n            state.WaitingConfirmation,\\n            _roundDuration,\\n            _timeToStartMachine,\\n            _partitionSize,\\n            _maxCycle,\\n            _picoSecondsToRunInsn\\n        );\\n\\n        uint256 waitingChallenge = getMaxStateDuration(\\n            state.WaitingChallenge,\\n            _roundDuration,\\n            _timeToStartMachine,\\n            _partitionSize,\\n            _maxCycle,\\n            _picoSecondsToRunInsn\\n        );\\n\\n        return waitingClaim + waitingConfirmation + waitingChallenge;\\n    }\\n\\n    function isConcerned(uint256 _index, address _user) public override view returns (bool) {\\n        return ((instance[_index].challenger == _user) || (instance[_index].claimer == _user));\\n    }\\n\\n    function getSubInstances(uint256 _index, address)\\n        public override view returns (address[] memory _addresses,\\n                            uint256[] memory _indices)\\n    {\\n        address[] memory a;\\n        uint256[] memory i;\\n        if (instance[_index].currentState == state.WaitingChallenge) {\\n            a = new address[](1);\\n            i = new uint256[](1);\\n            a[0] = address(vg);\\n            i[0] = instance[_index].vgInstance;\\n            return (a, i);\\n        }\\n        a = new address[](0);\\n        i = new uint256[](0);\\n        return (a, i);\\n    }\\n\\n    function getState(uint256 _index, address) public view returns\\n        ( address _challenger,\\n        address _claimer,\\n        uint256 _deadline,\\n        address _machine,\\n        bytes32 _initialHash,\\n        uint256 _finalTime,\\n        bytes32 _claimedFinalHash,\\n        bytes32 _currentState\\n        )\\n    {\\n        ComputeCtx memory i = instance[_index];\\n\\n        // we have to duplicate the code for getCurrentState because of\\n        // \\\"stack too deep\\\"\\n\\n        // this variables only matter on challenging state\\n        uint256 partitionSize = 1;\\n        uint256 partitionGameIndex = 1;\\n\\n        bytes32 currentState;\\n        if (i.currentState == state.WaitingClaim) {\\n            currentState = \\\"WaitingClaim\\\";\\n        }\\n        if (i.currentState == state.WaitingConfirmation) {\\n            currentState = \\\"WaitingConfirmation\\\";\\n        }\\n        if (i.currentState == state.ClaimerMissedDeadline) {\\n            currentState = \\\"ClaimerMissedDeadline\\\";\\n        }\\n        if (i.currentState == state.WaitingChallenge) {\\n            currentState = \\\"WaitingChallenge\\\";\\n            partitionSize = vg.getPartitionQuerySize(i.vgInstance);\\n            partitionGameIndex = vg.getPartitionGameIndex(i.vgInstance);\\n        }\\n        if (i.currentState == state.ChallengerWon) {\\n            currentState = \\\"ChallengerWon\\\";\\n        }\\n        if (i.currentState == state.ClaimerWon) {\\n            currentState = \\\"ClaimerWon\\\";\\n        }\\n        if (i.currentState == state.ConsensusResult) {\\n            currentState = \\\"ConsensusResult\\\";\\n        }\\n\\n        return (\\n            i.challenger,\\n            i.claimer,\\n            i.timeOfLastMove +  getMaxStateDuration(\\n                i.currentState,\\n                i.roundDuration,\\n                40, // time to start machine\\n                partitionSize,\\n                i.finalTime,\\n                500 // pico seconds to run insn\\n            ),\\n            i.machine,\\n            i.initialHash,\\n            i.finalTime,\\n            i.claimedFinalHash,\\n            currentState\\n        );\\n    }\\n\\n    function getCurrentState(uint256 _index) public override view\\n        onlyInstantiated(_index)\\n        returns (bytes32)\\n    {\\n        if (instance[_index].currentState == state.WaitingClaim) {\\n            return \\\"WaitingClaim\\\";\\n        }\\n        if (instance[_index].currentState == state.WaitingConfirmation) {\\n            return \\\"WaitingConfirmation\\\";\\n        }\\n        if (instance[_index].currentState == state.ClaimerMissedDeadline) {\\n            return \\\"ClaimerMissedDeadline\\\";\\n        }\\n        if (instance[_index].currentState == state.WaitingChallenge) {\\n            return \\\"WaitingChallenge\\\";\\n        }\\n        if (instance[_index].currentState == state.ChallengerWon) {\\n            return \\\"ChallengerWon\\\";\\n        }\\n        if (instance[_index].currentState == state.ClaimerWon) {\\n            return \\\"ClaimerWon\\\";\\n        }\\n        if (instance[_index].currentState == state.ConsensusResult) {\\n            return \\\"ConsensusResult\\\";\\n        }\\n        require(false, \\\"Unrecognized state\\\");\\n    }\\n\\n    // remove these functions and change tests accordingly\\n    function stateIsWaitingClaim(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.WaitingClaim; }\\n\\n    function stateIsWaitingConfirmation(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.WaitingConfirmation; }\\n\\n    function stateIsClaimerMissedDeadline(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.ClaimerMissedDeadline; }\\n\\n    function stateIsWaitingChallange(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.WaitingChallenge; }\\n\\n    function stateIsChallengerWon(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.ChallengerWon; }\\n\\n    function stateIsClaimerWon(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.ClaimerWon; }\\n\\n    function stateIsConsensusResult(uint256 _index) public view\\n        onlyInstantiated(_index)\\n        returns (bool)\\n    { return instance[_index].currentState == state.ConsensusResult; }\\n\\n    function clearInstance(uint256 _index) internal {\\n        delete instance[_index].challenger;\\n        delete instance[_index].claimer;\\n        delete instance[_index].roundDuration;\\n        delete instance[_index].timeOfLastMove;\\n        delete instance[_index].machine;\\n        delete instance[_index].initialHash;\\n        delete instance[_index].finalTime;\\n        // !!!!!!!!! should call clear in vgInstance !!!!!!!!!\\n        delete instance[_index].vgInstance;\\n        deactivate(_index);\\n    }\\n\\n    function challengerWins(uint256 _index) private\\n        onlyInstantiated(_index)\\n    {\\n        clearInstance(_index);\\n        instance[_index].currentState = state.ChallengerWon;\\n        emit ComputeFinished(_index, uint8(instance[_index].currentState));\\n    }\\n\\n    function claimerWins(uint256 _index) private\\n        onlyInstantiated(_index)\\n    {\\n        clearInstance(_index);\\n        instance[_index].currentState = state.ClaimerWon;\\n        emit ComputeFinished(_index, uint8(instance[_index].currentState));\\n    }\\n}\\n\",\"keccak256\":\"0xd6e2c7fdefe3a6cf10ec4d27127a78abf3b73c7997c1a84efca8c6e8383a2750\",\"license\":\"GPL-3.0-only\"},\"contracts/ComputeInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n/// @title Interface for compute instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\ninterface ComputeInterface is Instantiator {\\n    enum state {\\n        WaitingClaim,\\n        WaitingConfirmation,\\n        ClaimerMissedDeadline,\\n        WaitingChallenge,\\n        ChallengerWon,\\n        ClaimerWon,\\n        ConsensusResult\\n    }\\n\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function instantiate(\\n        address _challenger,\\n        address _claimer,\\n        uint256 _roundDuration,\\n        address _machineAddress,\\n        bytes32 _initialHash,\\n        uint256 _finalTime\\n    ) external returns (uint256);\\n\\n    function submitClaim(uint256 _index, bytes32 _claimedFinalHash) external;\\n\\n    function confirm(uint256 _index) external;\\n\\n    function challenge(uint256 _index) external;\\n\\n    function winByVG(uint256 _index) external;\\n\\n    function claimVictoryByTime(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x481c569ec5f7c4e0e4842311e4c0d3676f79e707b88122eed3be06a8e4c34612\",\"license\":\"GPL-3.0-only\"},\"contracts/MMInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n/// @title Interface for memory manager instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\ninterface MMInterface is Instantiator {\\n    enum state {WaitingProofs, WaitingReplay, FinishedReplay}\\n\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function instantiate(\\n        address _provider,\\n        address _client,\\n        bytes32 _initialHash\\n    ) external returns (uint256);\\n\\n    function read(uint256 _index, uint64 _position) external returns (bytes8);\\n\\n    function write(\\n        uint256 _index,\\n        uint64 _position,\\n        bytes8 _value\\n    ) external;\\n\\n    function newHash(uint256 _index) external view returns (bytes32);\\n\\n    function finishProofPhase(uint256 _index) external;\\n\\n    function finishReplayPhase(uint256 _index) external;\\n\\n    function stateIsWaitingProofs(uint256 _index) external view returns (bool);\\n\\n    function stateIsWaitingReplay(uint256 _index) external view returns (bool);\\n\\n    function stateIsFinishedReplay(uint256 _index) external view returns (bool);\\n\\n    function getMaxInstanceDuration(\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe5e3665a3d9d2afb1dcec8496525625e04af657676e18e14a0916e3eca3227ad\",\"license\":\"GPL-3.0-only\"},\"contracts/MachineInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title MachineInterface interface contract\\npragma solidity ^0.7.0;\\n\\n\\ninterface MachineInterface {\\n    event StepGiven(uint8 exitCode);\\n\\n    function step(uint256) external returns (uint8);\\n\\n    function getMemoryInteractor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xaa3ec6dc829d132c860b01412bd278c594ddb699dbf4393953d7b1ec72fe68a6\",\"license\":\"GPL-3.0-only\"},\"contracts/PartitionInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n/// @title Abstract interface for partition instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\ninterface PartitionInterface is Instantiator {\\n    enum state {\\n        WaitingQuery,\\n        WaitingHashes,\\n        ChallengerWon,\\n        ClaimerWon,\\n        DivergenceFound\\n    }\\n\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function instantiate(\\n        address _challenger,\\n        address _claimer,\\n        bytes32 _initialHash,\\n        bytes32 _claimerFinalHash,\\n        uint256 _finalTime,\\n        uint256 _querySize,\\n        uint256 _roundDuration\\n    ) external returns (uint256);\\n\\n    function timeHash(uint256 _index, uint256 key)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function divergenceTime(uint256 _index) external view returns (uint256);\\n\\n    function stateIsWaitingQuery(uint256 _index) external view returns (bool);\\n\\n    function stateIsWaitingHashes(uint256 _index) external view returns (bool);\\n\\n    function stateIsChallengerWon(uint256 _index) external view returns (bool);\\n\\n    function stateIsClaimerWon(uint256 _index) external view returns (bool);\\n\\n    function stateIsDivergenceFound(uint256 _index)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getPartitionGameIndex(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getQuerySize(uint256 _index) external view returns (uint256);\\n\\n    function getMaxInstanceDuration(\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine,\\n        uint256 _partitionSize,\\n        uint256 _maxCycle,\\n        uint256 _picoSecondsToRunInsn\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x00b63017019412475d1ceee5a817fa1d714d7e6cff9aac7d2662eaef492f6687\",\"license\":\"GPL-3.0-only\"},\"contracts/VGInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n// @title Verification game instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Decorated.sol\\\";\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\nimport \\\"./PartitionInterface.sol\\\";\\nimport \\\"./MMInterface.sol\\\";\\nimport \\\"./MachineInterface.sol\\\";\\n\\ninterface VGInterface is Instantiator {\\n    enum state {\\n        WaitPartition,\\n        WaitMemoryProveValues,\\n        FinishedClaimerWon,\\n        FinishedChallengerWon\\n    }\\n\\n    function instantiate(\\n        address _challenger,\\n        address _claimer,\\n        uint256 _roundDuration,\\n        address _machineAddress,\\n        bytes32 _initialHash,\\n        bytes32 _claimerFinalHash,\\n        uint256 _finalTime\\n    ) external returns (uint256);\\n\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function stateIsFinishedClaimerWon(uint256 _index)\\n        external\\n        view\\n        returns (bool);\\n\\n    function stateIsFinishedChallengerWon(uint256 _index)\\n        external\\n        view\\n        returns (bool);\\n\\n    function winByPartitionTimeout(uint256 _index) external;\\n\\n    function startMachineRunChallenge(uint256 _index) external;\\n\\n    function settleVerificationGame(uint256 _index) external;\\n\\n    function claimVictoryByTime(uint256 _index) external;\\n\\n    //function stateIsWaitPartition(uint256 _index) public view returns (bool);\\n    //function stateIsWaitMemoryProveValues(uint256 _index) public view\\n    //  returns (bool);\\n    //function clearInstance(uint256 _index) internal;\\n    //function challengerWins(uint256 _index) private;\\n    //function claimerWins(uint256 _index) private;\\n\\n    function getPartitionQuerySize(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPartitionGameIndex(uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMaxInstanceDuration(\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine,\\n        uint256 _partitionSize,\\n        uint256 _maxCycle,\\n        uint256 _picoSecondsToRunInsn\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x520380137623cac076f23ab845ed9f6611f56065cab174455fcf9815c81d5ba6\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b506040516120083803806120088339818101604052602081101561003757600080fd5b5051600380546001600160a01b0319166001600160a01b03909216919091179055611fa1806100676000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063a0c222b4116100b8578063c19e71c31161007c578063c19e71c3146103c8578063c526656c14610412578063ce73b628146104d7578063d0a068cf146104f4578063ded4df6314610511578063e174b3bf1461052e57610142565b8063a0c222b414610331578063a20d952b14610354578063a2dc797314610371578063ab82d9a01461038e578063ba0179b5146103ab57610142565b80635748c1301161010a5780635748c130146102105780636547429e1461022d5780636c092edd1461024a57806373df16121461026757806382afd23b146102f5578063916b9bef1461031257610142565b806301ff62ab1461014757806326987b6014610187578063370f31aa146101a1578063388e43be146101d65780633d46b819146101f3575b600080fd5b6101736004803603604081101561015d57600080fd5b50803590602001356001600160a01b031661054b565b604080519115158252519081900360200190f35b61018f610596565b60408051918252519081900360200190f35b61018f600480360360a08110156101b757600080fd5b508035906020810135906040810135906060810135906080013561059c565b610173600480360360208110156101ec57600080fd5b50356105e4565b61018f6004803603602081101561020957600080fd5b5035610658565b61018f6004803603602081101561022657600080fd5b50356106fe565b6101736004803603602081101561024357600080fd5b5035610954565b6101736004803603602081101561026057600080fd5b50356109a2565b6102936004803603604081101561027d57600080fd5b50803590602001356001600160a01b03166109f0565b60405180896001600160a01b03168152602001886001600160a01b03168152602001878152602001866001600160a01b031681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b6101736004803603602081101561030b57600080fd5b5035610d58565b61032f6004803603602081101561032857600080fd5b5035610d6d565b005b61032f6004803603604081101561034757600080fd5b5080359060200135610d90565b6101736004803603602081101561036a57600080fd5b5035610f2e565b61032f6004803603602081101561038757600080fd5b5035610f7c565b61032f600480360360208110156103a457600080fd5b50356111e4565b61032f600480360360208110156103c157600080fd5b503561143b565b61018f600480360360c08110156103de57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359091169060808101359060a001356115bb565b61043e6004803603604081101561042857600080fd5b50803590602001356001600160a01b0316611723565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561048257818101518382015260200161046a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104c15781810151838201526020016104a9565b5050505090500194505050505060405180910390f35b610173600480360360208110156104ed57600080fd5b5035611818565b6101736004803603602081101561050a57600080fd5b5035611866565b61032f6004803603602081101561052757600080fd5b50356118b4565b6101736004803603602081101561054457600080fd5b5035611adb565b6000828152600460205260408120546001600160a01b038381169116148061058f57506000838152600460205260409020600101546001600160a01b038381169116145b9392505050565b60005481565b6000806105ae60008888888888611b29565b905060006105c160018989898989611b29565b905060006105d460038a8a8a8a8a611b29565b9190920101979650505050505050565b600081806000541161062b576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b60015b60008481526004602052604090206009015460ff16600681111561064e57fe5b1491505b50919050565b600081806000541161069f576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6106a881610d58565b6106ea576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526002602052604090205490565b6000818060005411610745576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b60008381526004602052604081206009015460ff16600681111561076557fe5b1415610782576b57616974696e67436c61696d60a01b9150610652565b600160008481526004602052604090206009015460ff1660068111156107a457fe5b14156107c857722bb0b4ba34b733a1b7b73334b936b0ba34b7b760691b9150610652565b600260008481526004602052604090206009015460ff1660068111156107ea57fe5b14156108105774436c61696d65724d6973736564446561646c696e6560581b9150610652565b600360008481526004602052604090206009015460ff16600681111561083257fe5b1415610853576f57616974696e674368616c6c656e676560801b9150610652565b600460008481526004602052604090206009015460ff16600681111561087557fe5b1415610893576c21b430b63632b733b2b92bb7b760991b9150610652565b600560008481526004602052604090206009015460ff1660068111156108b557fe5b14156108d0576921b630b4b6b2b92bb7b760b11b9150610652565b600660008481526004602052604090206009015460ff1660068111156108f257fe5b1415610912576e10dbdb9cd95b9cdd5cd4995cdd5b1d608a1b9150610652565b6040805162461bcd60e51b8152602060048201526012602482015271556e7265636f676e697a656420737461746560701b604482015290519081900360640190fd5b600081806000541161099b576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600461062e565b60008180600054116109e9576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600261062e565b600080600080600080600080610a04611e29565b60008b81526004602081815260409283902083516101408101855281546001600160a01b03908116825260018301548116938201939093526002820154948101949094526003810154606085015291820154166080830152600581015460a083015260068082015460c0840152600782015460e08401526008820154610100840152600982015461012084019160ff90911690811115610aa057fe5b6006811115610aab57fe5b90525090506001806000808461012001516006811115610ac757fe5b1415610adf57506b57616974696e67436c61696d60a01b5b60018461012001516006811115610af257fe5b1415610b115750722bb0b4ba34b733a1b7b73334b936b0ba34b7b760691b5b60028461012001516006811115610b2457fe5b1415610b45575074436c61696d65724d6973736564446561646c696e6560581b5b60038461012001516006811115610b5857fe5b1415610c71575060035461010084015160408051630c91927b60e01b81526004810192909252516f57616974696e674368616c6c656e676560801b926001600160a01b031691630c91927b916024808301926020929190829003018186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d6020811015610bed57600080fd5b505160035461010086015160408051622231c360e11b81526004810192909252519295506001600160a01b03909116916244638691602480820192602092909190829003018186803b158015610c4257600080fd5b505afa158015610c56573d6000803e3d6000fd5b505050506040513d6020811015610c6c57600080fd5b505191505b60048461012001516006811115610c8457fe5b1415610c9d57506c21b430b63632b733b2b92bb7b760991b5b60058461012001516006811115610cb057fe5b1415610cc657506921b630b4b6b2b92bb7b760b11b5b60068461012001516006811115610cd957fe5b1415610cf457506e10dbdb9cd95b9cdd5cd4995cdd5b1d608a1b5b83600001518460200151610d1c86610120015187604001516028888a60c001516101f4611b29565b86606001510186608001518760a001518860c001518960e00151879b509b509b509b509b509b509b509b50505050509295985092959890939650565b60009081526001602052604090205460ff1690565b6000908152600160209081526040808320805460ff191690556002909152812055565b818060005411610dd5576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6000838152600460205260409020600101546001600160a01b0316338114610e3f576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600084815260026020526040812080546001019055849060008681526004602052604090206009015460ff166006811115610e7657fe5b14610ec8576040805162461bcd60e51b815260206004820152601c60248201527f53746174652073686f756c642062652057616974696e67436c61696d00000000604482015290519081900360640190fd5b60008581526004602090815260409182902060078101879055600901805460ff19166001179055815187815290810186905281517f1e9358f673ff367487ce56f136412ae5b69bf2c06e223aad2756d748c2a9b52a929181900390910190a15050505050565b6000818060005411610f75576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600061062e565b808060005411610fc1576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6000828152600260208181526040808420805460019081019091556004909252832060098101549281015460069091015486949361100c9360ff9091169291602891906101f4611b29565b60008581526004602052604090206003015401421190508061105f5760405162461bcd60e51b815260040180806020018281038252602c815260200180611e9f602c913960400191505060405180910390fd5b6000848152600460205260409020546001600160a01b0316331480156110a2575060008481526004602052604081206009015460ff1660068111156110a057fe5b145b1561113857600084815260046020526040902060090180546002919060ff19166001835b02179055506110d484610d6d565b6000848152600460205260409020600901547fce5d57dc06bffee515dc9f8ca3a267203dbbe503f6bfad687a7120d00756913e90859060ff16600681111561111857fe5b6040805192835260ff90911660208301528051918290030190a1506111df565b6000848152600460205260409020600101546001600160a01b0316331480156111805750600160008581526004602052604090206009015460ff16600681111561117e57fe5b145b156111a857600084815260046020526040902060090180546006919060ff19166001836110c6565b60405162461bcd60e51b815260040180806020018281038252602f815260200180611f1d602f913960400191505060405180910390fd5b505050565b808060005411611229576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6000828152600460205260409020546001600160a01b0316338114611290576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600083815260026020526040902080546001908101909155839060008581526004602052604090206009015460ff1660068111156112ca57fe5b146113065760405162461bcd60e51b8152600401808060200182810382526023815260200180611e7c6023913960400191505060405180910390fd5b60035460008581526004602081815260408084208054600182015460028301548387015460058501546007860154600690960154875163020b738760e41b81526001600160a01b039687169a81019a909a5293851660248a0152604489019290925283166064880152608487015260a486019290925260c485019190915290519416936320b738709360e4808501948390030190829087803b1580156113ab57600080fd5b505af11580156113bf573d6000803e3d6000fd5b505050506040513d60208110156113d557600080fd5b50516000858152600460205260409020600881019190915560090180546003919060ff191660018302179055506040805185815290517fa895da4b794aeba8d8082db237265459db7b7ffdb5aa7c2332a7c5eafbfae7359181900360200190a150505050565b808060005411611480576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6000828152600460205260409020546001600160a01b03163381146114e7576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600083815260026020526040902080546001908101909155839060008581526004602052604090206009015460ff16600681111561152157fe5b1461155d5760405162461bcd60e51b8152600401808060200182810382526023815260200180611e7c6023913960400191505060405180910390fd5b6000848152600460205260409020600901805460ff1916600617905561158284611c84565b6040805185815290517fa832892b4543448b594422a93bf38c889d54ae5938a065c6ec5f4636161f522a9181900360200190a150505050565b6000856001600160a01b0316876001600160a01b0316141561160e5760405162461bcd60e51b8152600401808060200182810382526025815260200180611ef86025913960400191505060405180910390fd5b600080548152600460208190526040822080546001600160a01b03808c166001600160a01b0319928316178355600180840180548d8416908516179055600284018b90559383018054918a16919092161790556005810186905560068101859055600981018054919392909160ff191690830217905550426003820155600054604080519182526001600160a01b03808b166020840152808a1683830152606083018990528716608083015260a0820186905260c08201859052517f9f53c9493351536908d5efd56da31dfb5a53a510ac3e216afe64af077b558d509181900360e00190a150506000805481526001602081905260408220805460ff19168217905581549081019091555b9695505050505050565b6060808080600360008781526004602052604090206009015460ff16600681111561174a57fe5b14156117f45760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929450905060208083019080368337505060035484519293506001600160a01b0316918491506000906117aa57fe5b6001600160a01b039092166020928302919091018201526000878152600490915260408120600801548251909183916117df57fe5b60209081029190910101529092509050611811565b505060408051600080825260208201908152818301909252925090505b9250929050565b600081806000541161185f576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600361062e565b60008180600054116118ad576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600561062e565b8080600054116118f9576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b60008281526002602052604090208054600101905581600360008481526004602052604090206009015460ff16600681111561193157fe5b1461196d5760405162461bcd60e51b815260040180806020018281038252602d815260200180611ecb602d913960400191505060405180910390fd5b60008381526004602081815260409283902060080154600354845163b6b5c31960e01b8152938401829052935190936001600160a01b03169263b6b5c319926024808301939192829003018186803b1580156119c857600080fd5b505afa1580156119dc573d6000803e3d6000fd5b505050506040513d60208110156119f257600080fd5b505115611a0857611a0284611ce5565b506111df565b60035460408051633664f8bf60e11b81526004810184905290516001600160a01b0390921691636cc9f17e91602480820192602092909190829003018186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d6020811015611a7e57600080fd5b505115611a8e57611a0284611db8565b6040805162461bcd60e51b815260206004820152601860248201527f5374617465206f66205647206973206e6f742066696e616c0000000000000000604482015290519081900360640190fd5b6000818060005411611b22576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600661062e565b600080876006811115611b3857fe5b1415611b54578564e8d4a510008484025b048601019050611719565b6001876006811115611b6257fe5b1415611b77578564e8d4a51000848402611b49565b6003876006811115611b8557fe5b1415611c265760035460408051631b8798d560e11b81526004810189905260248101889052604481018790526064810186905260848101859052905188926001600160a01b03169163370f31aa9160a4808301926020929190829003018186803b158015611bf257600080fd5b505afa158015611c06573d6000803e3d6000fd5b505050506040513d6020811015611c1c57600080fd5b5051019050611719565b6005876006811115611c3457fe5b1480611c4b57506004876006811115611c4957fe5b145b80611c6157506002876006811115611c5f57fe5b145b80611c7757506006876006811115611c7557fe5b145b1561171957506000611719565b6000818152600460208190526040822080546001600160a01b031990811682556001820180548216905560028201849055600382018490559181018054909216909155600581018290556006810182905560080155611ce281610d6d565b50565b808060005411611d2a576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b611d3382611c84565b6000828152600460208190526040909120600901805460ff19166001835b02179055506000828152600460205260409020600901547fce5d57dc06bffee515dc9f8ca3a267203dbbe503f6bfad687a7120d00756913e90839060ff166006811115611d9a57fe5b6040805192835260ff90911660208301528051918290030190a15050565b808060005411611dfd576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b611e0682611c84565b600082815260046020526040902060090180546005919060ff1916600183611d51565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906101208201529056fe53746174652073686f756c642062652057616974696e67436f6e6669726d6174696f6e446561646c696e65206973206e6f74206f76657220666f7220746869732073706563696669632073746174655374617465206973206e6f742057616974696e674368616c6c656e67652c2063616e6e6f742077696e427956474368616c6c656e67657220616e6420436c61696d6572206e65656420746f206469666665724661696c20746f20436c61696d566963746f7279427954696d6520696e2063757272656e7420636f6e646974696f6e496e646578206e6f7420696e7374616e74696174656400000000000000000000a2646970667358221220fa8588b61beef60da0676ddba3c40de659b9383472cb4e58e89f27d1a9e7b9e964736f6c63430007010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063a0c222b4116100b8578063c19e71c31161007c578063c19e71c3146103c8578063c526656c14610412578063ce73b628146104d7578063d0a068cf146104f4578063ded4df6314610511578063e174b3bf1461052e57610142565b8063a0c222b414610331578063a20d952b14610354578063a2dc797314610371578063ab82d9a01461038e578063ba0179b5146103ab57610142565b80635748c1301161010a5780635748c130146102105780636547429e1461022d5780636c092edd1461024a57806373df16121461026757806382afd23b146102f5578063916b9bef1461031257610142565b806301ff62ab1461014757806326987b6014610187578063370f31aa146101a1578063388e43be146101d65780633d46b819146101f3575b600080fd5b6101736004803603604081101561015d57600080fd5b50803590602001356001600160a01b031661054b565b604080519115158252519081900360200190f35b61018f610596565b60408051918252519081900360200190f35b61018f600480360360a08110156101b757600080fd5b508035906020810135906040810135906060810135906080013561059c565b610173600480360360208110156101ec57600080fd5b50356105e4565b61018f6004803603602081101561020957600080fd5b5035610658565b61018f6004803603602081101561022657600080fd5b50356106fe565b6101736004803603602081101561024357600080fd5b5035610954565b6101736004803603602081101561026057600080fd5b50356109a2565b6102936004803603604081101561027d57600080fd5b50803590602001356001600160a01b03166109f0565b60405180896001600160a01b03168152602001886001600160a01b03168152602001878152602001866001600160a01b031681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b6101736004803603602081101561030b57600080fd5b5035610d58565b61032f6004803603602081101561032857600080fd5b5035610d6d565b005b61032f6004803603604081101561034757600080fd5b5080359060200135610d90565b6101736004803603602081101561036a57600080fd5b5035610f2e565b61032f6004803603602081101561038757600080fd5b5035610f7c565b61032f600480360360208110156103a457600080fd5b50356111e4565b61032f600480360360208110156103c157600080fd5b503561143b565b61018f600480360360c08110156103de57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359091169060808101359060a001356115bb565b61043e6004803603604081101561042857600080fd5b50803590602001356001600160a01b0316611723565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561048257818101518382015260200161046a565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104c15781810151838201526020016104a9565b5050505090500194505050505060405180910390f35b610173600480360360208110156104ed57600080fd5b5035611818565b6101736004803603602081101561050a57600080fd5b5035611866565b61032f6004803603602081101561052757600080fd5b50356118b4565b6101736004803603602081101561054457600080fd5b5035611adb565b6000828152600460205260408120546001600160a01b038381169116148061058f57506000838152600460205260409020600101546001600160a01b038381169116145b9392505050565b60005481565b6000806105ae60008888888888611b29565b905060006105c160018989898989611b29565b905060006105d460038a8a8a8a8a611b29565b9190920101979650505050505050565b600081806000541161062b576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b60015b60008481526004602052604090206009015460ff16600681111561064e57fe5b1491505b50919050565b600081806000541161069f576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6106a881610d58565b6106ea576040805162461bcd60e51b815260206004820152600e60248201526d496e64657820696e61637469766560901b604482015290519081900360640190fd5b505060009081526002602052604090205490565b6000818060005411610745576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b60008381526004602052604081206009015460ff16600681111561076557fe5b1415610782576b57616974696e67436c61696d60a01b9150610652565b600160008481526004602052604090206009015460ff1660068111156107a457fe5b14156107c857722bb0b4ba34b733a1b7b73334b936b0ba34b7b760691b9150610652565b600260008481526004602052604090206009015460ff1660068111156107ea57fe5b14156108105774436c61696d65724d6973736564446561646c696e6560581b9150610652565b600360008481526004602052604090206009015460ff16600681111561083257fe5b1415610853576f57616974696e674368616c6c656e676560801b9150610652565b600460008481526004602052604090206009015460ff16600681111561087557fe5b1415610893576c21b430b63632b733b2b92bb7b760991b9150610652565b600560008481526004602052604090206009015460ff1660068111156108b557fe5b14156108d0576921b630b4b6b2b92bb7b760b11b9150610652565b600660008481526004602052604090206009015460ff1660068111156108f257fe5b1415610912576e10dbdb9cd95b9cdd5cd4995cdd5b1d608a1b9150610652565b6040805162461bcd60e51b8152602060048201526012602482015271556e7265636f676e697a656420737461746560701b604482015290519081900360640190fd5b600081806000541161099b576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600461062e565b60008180600054116109e9576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600261062e565b600080600080600080600080610a04611e29565b60008b81526004602081815260409283902083516101408101855281546001600160a01b03908116825260018301548116938201939093526002820154948101949094526003810154606085015291820154166080830152600581015460a083015260068082015460c0840152600782015460e08401526008820154610100840152600982015461012084019160ff90911690811115610aa057fe5b6006811115610aab57fe5b90525090506001806000808461012001516006811115610ac757fe5b1415610adf57506b57616974696e67436c61696d60a01b5b60018461012001516006811115610af257fe5b1415610b115750722bb0b4ba34b733a1b7b73334b936b0ba34b7b760691b5b60028461012001516006811115610b2457fe5b1415610b45575074436c61696d65724d6973736564446561646c696e6560581b5b60038461012001516006811115610b5857fe5b1415610c71575060035461010084015160408051630c91927b60e01b81526004810192909252516f57616974696e674368616c6c656e676560801b926001600160a01b031691630c91927b916024808301926020929190829003018186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d6020811015610bed57600080fd5b505160035461010086015160408051622231c360e11b81526004810192909252519295506001600160a01b03909116916244638691602480820192602092909190829003018186803b158015610c4257600080fd5b505afa158015610c56573d6000803e3d6000fd5b505050506040513d6020811015610c6c57600080fd5b505191505b60048461012001516006811115610c8457fe5b1415610c9d57506c21b430b63632b733b2b92bb7b760991b5b60058461012001516006811115610cb057fe5b1415610cc657506921b630b4b6b2b92bb7b760b11b5b60068461012001516006811115610cd957fe5b1415610cf457506e10dbdb9cd95b9cdd5cd4995cdd5b1d608a1b5b83600001518460200151610d1c86610120015187604001516028888a60c001516101f4611b29565b86606001510186608001518760a001518860c001518960e00151879b509b509b509b509b509b509b509b50505050509295985092959890939650565b60009081526001602052604090205460ff1690565b6000908152600160209081526040808320805460ff191690556002909152812055565b818060005411610dd5576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6000838152600460205260409020600101546001600160a01b0316338114610e3f576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600084815260026020526040812080546001019055849060008681526004602052604090206009015460ff166006811115610e7657fe5b14610ec8576040805162461bcd60e51b815260206004820152601c60248201527f53746174652073686f756c642062652057616974696e67436c61696d00000000604482015290519081900360640190fd5b60008581526004602090815260409182902060078101879055600901805460ff19166001179055815187815290810186905281517f1e9358f673ff367487ce56f136412ae5b69bf2c06e223aad2756d748c2a9b52a929181900390910190a15050505050565b6000818060005411610f75576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600061062e565b808060005411610fc1576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6000828152600260208181526040808420805460019081019091556004909252832060098101549281015460069091015486949361100c9360ff9091169291602891906101f4611b29565b60008581526004602052604090206003015401421190508061105f5760405162461bcd60e51b815260040180806020018281038252602c815260200180611e9f602c913960400191505060405180910390fd5b6000848152600460205260409020546001600160a01b0316331480156110a2575060008481526004602052604081206009015460ff1660068111156110a057fe5b145b1561113857600084815260046020526040902060090180546002919060ff19166001835b02179055506110d484610d6d565b6000848152600460205260409020600901547fce5d57dc06bffee515dc9f8ca3a267203dbbe503f6bfad687a7120d00756913e90859060ff16600681111561111857fe5b6040805192835260ff90911660208301528051918290030190a1506111df565b6000848152600460205260409020600101546001600160a01b0316331480156111805750600160008581526004602052604090206009015460ff16600681111561117e57fe5b145b156111a857600084815260046020526040902060090180546006919060ff19166001836110c6565b60405162461bcd60e51b815260040180806020018281038252602f815260200180611f1d602f913960400191505060405180910390fd5b505050565b808060005411611229576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6000828152600460205260409020546001600160a01b0316338114611290576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600083815260026020526040902080546001908101909155839060008581526004602052604090206009015460ff1660068111156112ca57fe5b146113065760405162461bcd60e51b8152600401808060200182810382526023815260200180611e7c6023913960400191505060405180910390fd5b60035460008581526004602081815260408084208054600182015460028301548387015460058501546007860154600690960154875163020b738760e41b81526001600160a01b039687169a81019a909a5293851660248a0152604489019290925283166064880152608487015260a486019290925260c485019190915290519416936320b738709360e4808501948390030190829087803b1580156113ab57600080fd5b505af11580156113bf573d6000803e3d6000fd5b505050506040513d60208110156113d557600080fd5b50516000858152600460205260409020600881019190915560090180546003919060ff191660018302179055506040805185815290517fa895da4b794aeba8d8082db237265459db7b7ffdb5aa7c2332a7c5eafbfae7359181900360200190a150505050565b808060005411611480576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b6000828152600460205260409020546001600160a01b03163381146114e7576040805162461bcd60e51b815260206004820152601860248201527721b0b73737ba1031329031b0b63632b210313c903ab9b2b960411b604482015290519081900360640190fd5b600083815260026020526040902080546001908101909155839060008581526004602052604090206009015460ff16600681111561152157fe5b1461155d5760405162461bcd60e51b8152600401808060200182810382526023815260200180611e7c6023913960400191505060405180910390fd5b6000848152600460205260409020600901805460ff1916600617905561158284611c84565b6040805185815290517fa832892b4543448b594422a93bf38c889d54ae5938a065c6ec5f4636161f522a9181900360200190a150505050565b6000856001600160a01b0316876001600160a01b0316141561160e5760405162461bcd60e51b8152600401808060200182810382526025815260200180611ef86025913960400191505060405180910390fd5b600080548152600460208190526040822080546001600160a01b03808c166001600160a01b0319928316178355600180840180548d8416908516179055600284018b90559383018054918a16919092161790556005810186905560068101859055600981018054919392909160ff191690830217905550426003820155600054604080519182526001600160a01b03808b166020840152808a1683830152606083018990528716608083015260a0820186905260c08201859052517f9f53c9493351536908d5efd56da31dfb5a53a510ac3e216afe64af077b558d509181900360e00190a150506000805481526001602081905260408220805460ff19168217905581549081019091555b9695505050505050565b6060808080600360008781526004602052604090206009015460ff16600681111561174a57fe5b14156117f45760408051600180825281830190925290602080830190803683375050604080516001808252818301909252929450905060208083019080368337505060035484519293506001600160a01b0316918491506000906117aa57fe5b6001600160a01b039092166020928302919091018201526000878152600490915260408120600801548251909183916117df57fe5b60209081029190910101529092509050611811565b505060408051600080825260208201908152818301909252925090505b9250929050565b600081806000541161185f576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600361062e565b60008180600054116118ad576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600561062e565b8080600054116118f9576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b60008281526002602052604090208054600101905581600360008481526004602052604090206009015460ff16600681111561193157fe5b1461196d5760405162461bcd60e51b815260040180806020018281038252602d815260200180611ecb602d913960400191505060405180910390fd5b60008381526004602081815260409283902060080154600354845163b6b5c31960e01b8152938401829052935190936001600160a01b03169263b6b5c319926024808301939192829003018186803b1580156119c857600080fd5b505afa1580156119dc573d6000803e3d6000fd5b505050506040513d60208110156119f257600080fd5b505115611a0857611a0284611ce5565b506111df565b60035460408051633664f8bf60e11b81526004810184905290516001600160a01b0390921691636cc9f17e91602480820192602092909190829003018186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d6020811015611a7e57600080fd5b505115611a8e57611a0284611db8565b6040805162461bcd60e51b815260206004820152601860248201527f5374617465206f66205647206973206e6f742066696e616c0000000000000000604482015290519081900360640190fd5b6000818060005411611b22576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b600661062e565b600080876006811115611b3857fe5b1415611b54578564e8d4a510008484025b048601019050611719565b6001876006811115611b6257fe5b1415611b77578564e8d4a51000848402611b49565b6003876006811115611b8557fe5b1415611c265760035460408051631b8798d560e11b81526004810189905260248101889052604481018790526064810186905260848101859052905188926001600160a01b03169163370f31aa9160a4808301926020929190829003018186803b158015611bf257600080fd5b505afa158015611c06573d6000803e3d6000fd5b505050506040513d6020811015611c1c57600080fd5b5051019050611719565b6005876006811115611c3457fe5b1480611c4b57506004876006811115611c4957fe5b145b80611c6157506002876006811115611c5f57fe5b145b80611c7757506006876006811115611c7557fe5b145b1561171957506000611719565b6000818152600460208190526040822080546001600160a01b031990811682556001820180548216905560028201849055600382018490559181018054909216909155600581018290556006810182905560080155611ce281610d6d565b50565b808060005411611d2a576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b611d3382611c84565b6000828152600460208190526040909120600901805460ff19166001835b02179055506000828152600460205260409020600901547fce5d57dc06bffee515dc9f8ca3a267203dbbe503f6bfad687a7120d00756913e90839060ff166006811115611d9a57fe5b6040805192835260ff90911660208301528051918290030190a15050565b808060005411611dfd576040805162461bcd60e51b81526020600482015260166024820152600080516020611f4c833981519152604482015290519081900360640190fd5b611e0682611c84565b600082815260046020526040902060090180546005919060ff1916600183611d51565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052906101208201529056fe53746174652073686f756c642062652057616974696e67436f6e6669726d6174696f6e446561646c696e65206973206e6f74206f76657220666f7220746869732073706563696669632073746174655374617465206973206e6f742057616974696e674368616c6c656e67652c2063616e6e6f742077696e427956474368616c6c656e67657220616e6420436c61696d6572206e65656420746f206469666665724661696c20746f20436c61696d566963746f7279427954696d6520696e2063757272656e7420636f6e646974696f6e496e646578206e6f7420696e7374616e74696174656400000000000000000000a2646970667358221220fa8588b61beef60da0676ddba3c40de659b9383472cb4e58e89f27d1a9e7b9e964736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "challenge(uint256)": {
        "params": {
          "_index": "Index of compute instance which challenger is starting the VG."
        }
      },
      "confirm(uint256)": {
        "params": {
          "_index": "Index of compute instance that the challenger is confirming the claim."
        }
      },
      "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_maxCycle": "number of instructions until the machine is forcibly halted",
          "_picoSecondsToRunInsn": "time the offchain will take to run one instruction"
        }
      },
      "instantiate(address,address,uint256,address,bytes32,uint256)": {
        "params": {
          "_challenger": "address of the challenger.",
          "_claimer": "address of the claimer.",
          "_finalTime": "max cycle of the machine for that computation",
          "_initialHash": "hash in which both claimer and challenger agree on",
          "_machineAddress": "address of the machine that will run the instruction",
          "_roundDuration": "duration of the round (security param)"
        },
        "returns": {
          "_0": "Compute index."
        }
      },
      "submitClaim(uint256,bytes32)": {
        "params": {
          "_claimedFinalHash": "hash of the machine after computation is completed.",
          "_index": "Index of instance that the claimer is interacting with"
        }
      },
      "winByVG(uint256)": {
        "params": {
          "_index": "Index of compute instance which challenger is starting the VG."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "challenge(uint256)": {
        "notice": "Challenger disputes the claim, starting a verification game."
      },
      "claimVictoryByTime(uint256)": {
        "notice": "Claim victory for opponent timeout."
      },
      "confirm(uint256)": {
        "notice": "Challenger accepts claim."
      },
      "instantiate(address,address,uint256,address,bytes32,uint256)": {
        "notice": "Instantiates a compute instance."
      },
      "submitClaim(uint256,bytes32)": {
        "notice": "Claimer claims the hash of the result of a computation"
      },
      "winByVG(uint256)": {
        "notice": "In case one of the parties wins the verification game, then he or she can call this function to claim victory in this contract as well."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 94,
        "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 98,
        "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
        "label": "active",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 102,
        "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
        "label": "nonce",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 587,
        "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
        "label": "vg",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(VGInterface)6511"
      },
      {
        "astId": 612,
        "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
        "label": "instance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(ComputeCtx)608_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VGInterface)6511": {
        "encoding": "inplace",
        "label": "contract VGInterface",
        "numberOfBytes": "20"
      },
      "t_enum(state)1941": {
        "encoding": "inplace",
        "label": "enum ComputeInterface.state",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ComputeCtx)608_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ComputeInstantiator.ComputeCtx)",
        "numberOfBytes": "32",
        "value": "t_struct(ComputeCtx)608_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ComputeCtx)608_storage": {
        "encoding": "inplace",
        "label": "struct ComputeInstantiator.ComputeCtx",
        "members": [
          {
            "astId": 589,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 591,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "claimer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 593,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "roundDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 595,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "timeOfLastMove",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 597,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "machine",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 599,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "initialHash",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 601,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "finalTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 603,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "claimedFinalHash",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 605,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "vgInstance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 607,
            "contract": "contracts/ComputeInstantiator.sol:ComputeInstantiator",
            "label": "currentState",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(state)1941"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1619400",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "challenge(uint256)": "infinite",
      "claimVictoryByTime(uint256)": "infinite",
      "confirm(uint256)": "infinite",
      "currentIndex()": "1044",
      "deactivate(uint256)": "26269",
      "getCurrentState(uint256)": "infinite",
      "getMaxInstanceDuration(uint256,uint256,uint256,uint256,uint256)": "infinite",
      "getNonce(uint256)": "infinite",
      "getState(uint256,address)": "infinite",
      "getSubInstances(uint256,address)": "infinite",
      "instantiate(address,address,uint256,address,bytes32,uint256)": "infinite",
      "isActive(uint256)": "1229",
      "isConcerned(uint256,address)": "2138",
      "stateIsChallengerWon(uint256)": "infinite",
      "stateIsClaimerMissedDeadline(uint256)": "infinite",
      "stateIsClaimerWon(uint256)": "infinite",
      "stateIsConsensusResult(uint256)": "infinite",
      "stateIsWaitingChallange(uint256)": "infinite",
      "stateIsWaitingClaim(uint256)": "infinite",
      "stateIsWaitingConfirmation(uint256)": "infinite",
      "submitClaim(uint256,bytes32)": "infinite",
      "winByVG(uint256)": "infinite"
    },
    "internal": {
      "challengerWins(uint256)": "infinite",
      "claimerWins(uint256)": "infinite",
      "clearInstance(uint256)": "113616",
      "getMaxStateDuration(enum ComputeInterface.state,uint256,uint256,uint256,uint256,uint256)": "infinite"
    }
  }
}