/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CartesiComputeHarnessInterface extends ethers.utils.Interface {
  functions: {
    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[],bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "instantiate",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string[],
      {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "instantiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class CartesiComputeHarness extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CartesiComputeHarnessInterface;

  functions: {
    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      _noChallengeDrive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[],bool)"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      _noChallengeDrive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  instantiate(
    _finalTime: BigNumberish,
    _templateHash: BytesLike,
    _outputPosition: BigNumberish,
    _outputLog2Size: BigNumberish,
    _roundDuration: BigNumberish,
    parties: string[],
    _inputDrives: {
      position: BigNumberish;
      driveLog2Size: BigNumberish;
      directValue: BytesLike;
      loggerIpfsPath: BytesLike;
      loggerRootHash: BytesLike;
      provider: string;
      waitsProvider: boolean;
      needsLogger: boolean;
      downloadAsCAR: boolean;
    }[],
    _noChallengeDrive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[],bool)"(
    _finalTime: BigNumberish,
    _templateHash: BytesLike,
    _outputPosition: BigNumberish,
    _outputLog2Size: BigNumberish,
    _roundDuration: BigNumberish,
    parties: string[],
    _inputDrives: {
      position: BigNumberish;
      driveLog2Size: BigNumberish;
      directValue: BytesLike;
      loggerIpfsPath: BytesLike;
      loggerRootHash: BytesLike;
      provider: string;
      waitsProvider: boolean;
      needsLogger: boolean;
      downloadAsCAR: boolean;
    }[],
    _noChallengeDrive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      _noChallengeDrive: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[],bool)"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      _noChallengeDrive: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      _noChallengeDrive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[],bool)"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      _noChallengeDrive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    instantiate(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      _noChallengeDrive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "instantiate(uint256,bytes32,uint64,uint8,uint256,address[],tuple[],bool)"(
      _finalTime: BigNumberish,
      _templateHash: BytesLike,
      _outputPosition: BigNumberish,
      _outputLog2Size: BigNumberish,
      _roundDuration: BigNumberish,
      parties: string[],
      _inputDrives: {
        position: BigNumberish;
        driveLog2Size: BigNumberish;
        directValue: BytesLike;
        loggerIpfsPath: BytesLike;
        loggerRootHash: BytesLike;
        provider: string;
        waitsProvider: boolean;
        needsLogger: boolean;
        downloadAsCAR: boolean;
      }[],
      _noChallengeDrive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
