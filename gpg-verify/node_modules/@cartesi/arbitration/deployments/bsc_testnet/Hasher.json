{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mmAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "word",
          "type": "uint64"
        }
      ],
      "name": "Debug",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "exitCode",
          "type": "uint8"
        }
      ],
      "name": "StepGiven",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMemoryInteractor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mmIndex",
          "type": "uint256"
        }
      ],
      "name": "step",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": "0xFa88aDb853f48Eb533940Af2C33A99803531870c",
    "transactionIndex": 0,
    "gasUsed": "238727",
    "logsBloom": "0x
    "blockHash": "0xec92f315ceb6b2116ad0453266246a74df7227bb67ee59279f70bb9d8ba0c079",
    "transactionHash": "0x88bdc4962cf6c7b4dd411836055568439f268dc53ac8bbe53636319ec7c8f671",
    "logs": [],
    "blockNumber": 1948730,
    "cumulativeGasUsed": "238727",
    "status": 1,
    "byzantium": true
  },
  "address": "0xFa88aDb853f48Eb533940Af2C33A99803531870c",
  "args": [
    "0x399A465c28D3FFc5e6e0d1d6962Df48372c8A6e8"
  ],
  "solcInputHash": "0x42b609482474b272bec93b3bfa26f2c87c2a0a56d0daaf2511deb7af6d8c3952",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mmAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"word\",\"type\":\"uint64\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"exitCode\",\"type\":\"uint8\"}],\"name\":\"StepGiven\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMemoryInteractor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mmIndex\",\"type\":\"uint256\"}],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"step(uint256)\":{\"returns\":{\"_0\":\"false indicates a halted machine or invalid instruction\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"step(uint256)\":{\"notice\":\"Performs one step of the hasher machine on memory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Hasher.sol\":\"Hasher\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n\\n    function deactivate(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x084e3e769f423b3f32bd8faf119be132a478eeea8006bed69b527b2fdcfd45a1\",\"license\":\"Apache-2.0\"},\"contracts/Hasher.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title Subleq machine contract\\npragma solidity ^0.7.0;\\n\\nimport \\\"./MachineInterface.sol\\\";\\nimport \\\"./MMInterface.sol\\\";\\n\\n\\ncontract Hasher is MachineInterface {\\n\\n    event Debug(bytes32 message, uint64 word);\\n\\n    address mmAddress;\\n\\n    constructor(address _mmAddress) {\\n        mmAddress = _mmAddress;\\n    }\\n\\n    /// @notice Performs one step of the hasher machine on memory\\n    /// @return false indicates a halted machine or invalid instruction\\n    function step(uint256 _mmIndex) public override returns (uint8) {\\n        // hasher machine simply adds to the memory initial hash :)\\n        MMInterface mm = MMInterface(mmAddress);\\n        uint64 valuePosition = 0x0000000000000000;\\n        uint64 value = uint64(mm.read(_mmIndex, valuePosition));\\n        require(value < 0xFFFFFFFFFFFFFFFF, \\\"Overflowing machine\\\");\\n        mm.write(_mmIndex, valuePosition, bytes8(value + 1));\\n        return(endStep(_mmIndex, 0));\\n    }\\n\\n    function getAddress() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function getMemoryInteractor() public override view returns (address) {\\n        return(address(this));\\n    }\\n\\n    function endStep(uint256 _mmIndex, uint8 _exitCode) internal returns (uint8) {\\n        MMInterface mm = MMInterface(mmAddress);\\n        mm.finishReplayPhase(_mmIndex);\\n        emit StepGiven(_exitCode);\\n        return _exitCode;\\n    }\\n}\\n\",\"keccak256\":\"0x0fc233e9ee7a7667d2754a484b7f9c73b26648cb32f4f2dd675bd2dfa3feadf3\",\"license\":\"GPL-3.0-only\"},\"contracts/MMInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n/// @title Interface for memory manager instantiator\\npragma solidity ^0.7.0;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\ninterface MMInterface is Instantiator {\\n    enum state {WaitingProofs, WaitingReplay, FinishedReplay}\\n\\n    function getCurrentState(uint256 _index) external view returns (bytes32);\\n\\n    function instantiate(\\n        address _provider,\\n        address _client,\\n        bytes32 _initialHash\\n    ) external returns (uint256);\\n\\n    function read(uint256 _index, uint64 _position) external returns (bytes8);\\n\\n    function write(\\n        uint256 _index,\\n        uint64 _position,\\n        bytes8 _value\\n    ) external;\\n\\n    function newHash(uint256 _index) external view returns (bytes32);\\n\\n    function finishProofPhase(uint256 _index) external;\\n\\n    function finishReplayPhase(uint256 _index) external;\\n\\n    function stateIsWaitingProofs(uint256 _index) external view returns (bool);\\n\\n    function stateIsWaitingReplay(uint256 _index) external view returns (bool);\\n\\n    function stateIsFinishedReplay(uint256 _index) external view returns (bool);\\n\\n    function getMaxInstanceDuration(\\n        uint256 _roundDuration,\\n        uint256 _timeToStartMachine\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe5e3665a3d9d2afb1dcec8496525625e04af657676e18e14a0916e3eca3227ad\",\"license\":\"GPL-3.0-only\"},\"contracts/MachineInterface.sol\":{\"content\":\"// Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n// This program is free software: you can redistribute it and/or modify it under\\n// the terms of the GNU General Public License as published by the Free Software\\n// Foundation, either version 3 of the License, or (at your option) any later\\n// version.\\n\\n// This program is distributed in the hope that it will be useful, but WITHOUT ANY\\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n// PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// Note: This component currently has dependencies that are licensed under the GNU\\n// GPL, version 3, and so you should treat this component as a whole as being under\\n// the GPL version 3. But all Cartesi-written code in this component is licensed\\n// under the Apache License, version 2, or a compatible permissive license, and can\\n// be used independently under the Apache v2 license. After this component is\\n// rewritten, the entire component will be released under the Apache v2 license.\\n\\n\\n/// @title MachineInterface interface contract\\npragma solidity ^0.7.0;\\n\\n\\ninterface MachineInterface {\\n    event StepGiven(uint8 exitCode);\\n\\n    function step(uint256) external returns (uint8);\\n\\n    function getMemoryInteractor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xaa3ec6dc829d132c860b01412bd278c594ddb699dbf4393953d7b1ec72fe68a6\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516103583803806103588339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556102f3806100656000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806338cc4831146100465780633a1cde751461006a578063a35b2d0714610046575b600080fd5b61004e61009d565b604080516001600160a01b039092168252519081900360200190f35b6100876004803603602081101561008057600080fd5b50356100a1565b6040805160ff9092168252519081900360200190f35b3090565b60008054604080516346336cd360e01b8152600481018590526024810184905290516001600160a01b03909216918391829184916346336cd391604480830192602092919082900301818787803b1580156100fb57600080fd5b505af115801561010f573d6000803e3d6000fd5b505050506040513d602081101561012557600080fd5b505160c01c905067ffffffffffffffff811061017e576040805162461bcd60e51b81526020600482015260136024820152724f766572666c6f77696e67206d616368696e6560681b604482015290519081900360640190fd5b6040805163140e539f60e11b81526004810187905267ffffffffffffffff841660248201526001600160c01b03196001840160c01b16604482015290516001600160a01b0385169163281ca73e91606480830192600092919082900301818387803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b5050505061020f856000610218565b95945050505050565b6000805460408051631f6aea2b60e11b81526004810186905290516001600160a01b03909216918291633ed5d456916024808301928792919082900301818387803b15801561026657600080fd5b505af115801561027a573d6000803e3d6000fd5b50506040805160ff8716815290517f7ab9c6180230b32e97c918b15c3ccdb0d19d07b998239db4ac2b444998ac258c9350908190036020019150a150909291505056fea2646970667358221220b29b5684211094cbf04d9fa6955cb66162efeb8997c46f5c7ff324c48d7b037b64736f6c63430007010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806338cc4831146100465780633a1cde751461006a578063a35b2d0714610046575b600080fd5b61004e61009d565b604080516001600160a01b039092168252519081900360200190f35b6100876004803603602081101561008057600080fd5b50356100a1565b6040805160ff9092168252519081900360200190f35b3090565b60008054604080516346336cd360e01b8152600481018590526024810184905290516001600160a01b03909216918391829184916346336cd391604480830192602092919082900301818787803b1580156100fb57600080fd5b505af115801561010f573d6000803e3d6000fd5b505050506040513d602081101561012557600080fd5b505160c01c905067ffffffffffffffff811061017e576040805162461bcd60e51b81526020600482015260136024820152724f766572666c6f77696e67206d616368696e6560681b604482015290519081900360640190fd5b6040805163140e539f60e11b81526004810187905267ffffffffffffffff841660248201526001600160c01b03196001840160c01b16604482015290516001600160a01b0385169163281ca73e91606480830192600092919082900301818387803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b5050505061020f856000610218565b95945050505050565b6000805460408051631f6aea2b60e11b81526004810186905290516001600160a01b03909216918291633ed5d456916024808301928792919082900301818387803b15801561026657600080fd5b505af115801561027a573d6000803e3d6000fd5b50506040805160ff8716815290517f7ab9c6180230b32e97c918b15c3ccdb0d19d07b998239db4ac2b444998ac258c9350908190036020019150a150909291505056fea2646970667358221220b29b5684211094cbf04d9fa6955cb66162efeb8997c46f5c7ff324c48d7b037b64736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "step(uint256)": {
        "returns": {
          "_0": "false indicates a halted machine or invalid instruction"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "step(uint256)": {
        "notice": "Performs one step of the hasher machine on memory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2007,
        "contract": "contracts/Hasher.sol:Hasher",
        "label": "mmAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "151000",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "getAddress()": "196",
      "getMemoryInteractor()": "240",
      "step(uint256)": "infinite"
    },
    "internal": {
      "endStep(uint256,uint8)": "infinite"
    }
  }
}